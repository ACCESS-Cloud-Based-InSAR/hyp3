AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Bucket:
    Type: String

  PermissionsBoundaryPolicyArn:
    Type: String
    Default: ""

Conditions:
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundaryPolicyArn, "" ] ]

Outputs:

  LambdaArn:
    Value: !GetAtt Lambda.Arn

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundaryPolicyArn, !Ref AWS::NoValue]
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${Bucket}"
              - Effect: Allow
                Action: s3:GetObjectTagging
                Resource: !Sub "arn:aws:s3:::${Bucket}/*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          BUCKET: !Ref Bucket
      Code: src/
      Handler: get_files.lambda_handler
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python3.8
      Timeout: 30
