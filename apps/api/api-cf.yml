Parameters:

  JobsTable:
    Type: String

  UsersTable:
    Type: String

  AuthPublicKey:
    Type: String

  AuthAlgorithm:
    Type: String

  DomainName:
    Type: String

  CertificateArn:
    Type: String

  MonthlyJobQuotaPerUser:
    Type: Number

  SystemAvailable:
    Type: String

Outputs:

  Url:
    Value: !Sub "https://${CustomDomainName}/ui"

  ApiId:
    Value: !Ref Api

Resources:

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref AWS::StackName
      ProtocolType: HTTP
      Target: !GetAtt Lambda.Arn
      CredentialsArn: !GetAtt ApiRole.Arn

  ApiOverrides:
    Type: AWS::ApiGatewayV2::ApiGatewayManagedOverrides
    Properties:
      ApiId: !Ref Api
      Integration:
        PayloadFormatVersion: "1.0"
      Stage:
        AccessLogSettings:
          DestinationArn: !GetAtt ApiLogGroup.Arn
          Format: '{"requestId":"$context.requestId","sourceIp":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","userAgent":"$context.identity.userAgent","responseLatency":"$context.responseLatency"}'

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 180

  CustomDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref DomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateArn
          EndpointType: REGIONAL

  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref CustomDomainName
      Stage: $default

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: apigateway.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Lambda.Arn

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:GetItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${JobsTable}*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UsersTable}*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          USERS_TABLE_NAME: !Ref UsersTable
          AUTH_PUBLIC_KEY: !Ref AuthPublicKey
          AUTH_ALGORITHM: !Ref AuthAlgorithm
          MONTHLY_JOB_QUOTA_PER_USER: !Ref MonthlyJobQuotaPerUser
          SYSTEM_AVAILABLE: !Ref SystemAvailable
      Code: src/
      Handler: hyp3_api.lambda_handler.handler
      MemorySize: 3008
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 30
