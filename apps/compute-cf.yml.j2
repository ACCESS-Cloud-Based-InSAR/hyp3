AWSTemplateFormatVersion: 2010-09-09

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-computeenvironment-computeresources.html
# TODO: This is where the instance AMI and Type are specified. To have multiple instance types and amis per deployment, this
#       will need to support that. 

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  MaxvCpus:
    Type: Number
    MinValue: 0

  AmiId:
    Type: AWS::EC2::Image::Id

  ContentBucket:
    Type: String

  InstanceTypes:
    Type: CommaDelimitedList

Outputs:

  SharedComputeEnvironmentArn:
    Value: !Ref SharedComputeEnvironment

  SharedJobQueueArn:
    Value: !Ref SharedJobQueue

  {% for job_type, job_spec in job_types.items() %}
  {% if 'Shared' not in job_spec['compute_environment']['name'] %}
  {{ job_spec['compute_environment']['name'] }}ComputeEnvironmentArn:
    Value: !Ref {{ job_spec['compute_environment']['name'] }}ComputeEnvironment

  {{ job_spec['compute_environment']['name'] }}JobQueueArn:
    Value: !Ref {{ job_spec['compute_environment']['name'] }}JobQueue

  {% endif %}
  {% endfor %}

  TaskRoleArn:
    Value: !GetAtt TaskRole.Arn

  SecurityGroupId:
    Value: !Ref SecurityGroup

Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "Security group for ${AWS::StackName} machines"
      VpcId: !Ref VpcId

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpTokens: required
        UserData:
          Fn::Base64: |-
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0

            --==BOUNDARY==
            Content-Type: text/cloud-boothook; charset="us-ascii"

            #!/bin/bash
            cloud-init-per instance mkfs_ssd mkfs.ext4 /dev/nvme1n1
            mount /dev/nvme1n1 /var/lib/docker

            --==BOUNDARY==--

  SharedComputeEnvironment:
      Type: AWS::Batch::ComputeEnvironment
      Properties:
        ServiceRole: !GetAtt BatchServiceRole.Arn
        Type: MANAGED
        ComputeResources:
          Type: SPOT
          AllocationStrategy: SPOT_PRICE_CAPACITY_OPTIMIZED
          MinvCpus: 0
          MaxvCpus: !Ref MaxvCpus
          InstanceTypes: !Ref InstanceTypes
          ImageId: !Ref ImageId
          Subnets: !Ref SubnetIds
          InstanceRole: !Ref InstanceProfile
          SecurityGroupIds:
            - !Ref SecurityGroup
          LaunchTemplate:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Tags:
            Name: !Ref AWS::StackName

  SharedJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      Priority: 1
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref SharedComputeEnvironment
          Order: 1
      SchedulingPolicyArn: !Ref SchedulingPolicy

  SchedulingPolicy:
    Type: AWS::Batch::SchedulingPolicy

  {% for job_type, job_spec in job_types.items() if 'Shared' not in job_spec['compute_environment']['name'] %}
  {{ job_spec['compute_environment']['name'] }}ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ServiceRole: !GetAtt BatchServiceRole.Arn
      Type: MANAGED
      ComputeResources:
        Type: SPOT
        AllocationStrategy: SPOT_PRICE_CAPACITY_OPTIMIZED
        MinvCpus: 0
        MaxvCpus: !Ref MaxvCpus
        InstanceTypes: 
        {% for instance_type in job_spec['compute_environment']['instance_types'] %}
          - {{ instance_type }}
        {% endfor %}
        ImageId: {{ job_spec['compute_environment']['ami_id'] }}
        Subnets: !Ref SubnetIds
        InstanceRole: !Ref InstanceProfile
        SecurityGroupIds:
          - !Ref SecurityGroup
        LaunchTemplate:
          LaunchTemplateId: !Ref LaunchTemplate
          Version: !GetAtt LaunchTemplate.LatestVersionNumber
        Tags:
          Name: !Ref AWS::StackName

  {{ job_spec['compute_environment']['name'] }}JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      Priority: 1
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref {{ job_spec['compute_environment']['name'] }}ComputeEnvironment
          Order: 1
      SchedulingPolicyArn: !Ref SchedulingPolicy
  
  {% endfor %}

  TaskRole:
    Type: {{ 'Custom::JplRole' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::Role' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: ecs-tasks.amazonaws.com
          Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - !Ref TaskPolicy

  TaskPolicy:
    Type: {{ 'Custom::JplPolicy' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::ManagedPolicy' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplPolicy::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub "arn:aws:s3:::${ContentBucket}/*"
          - Effect: Allow
            Action: s3:PutObjectTagging
            Resource: !Sub "arn:aws:s3:::${ContentBucket}/*"

  BatchServiceRole:
    Type: {{ 'Custom::JplRole' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::Role' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: batch.amazonaws.com
          Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  InstanceRole:
    Type: {{ 'Custom::JplRole' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::Role' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
          Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      Path: /account-managed/hyp3/
      {% endif %}
      Roles:
        - !Ref InstanceRole
